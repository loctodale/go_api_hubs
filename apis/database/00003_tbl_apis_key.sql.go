// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: 00003_tbl_apis_key.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createApisKey = `-- name: CreateApisKey :execresult
INSERT INTO tbl_apis_key
(user_id, api_id, plan_id, api_key, quota_used, quota_reset_at, is_active, created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())
`

type CreateApisKeyParams struct {
	UserID       pgtype.UUID
	ApiID        pgtype.UUID
	PlanID       pgtype.UUID
	ApiKey       pgtype.Text
	QuotaUsed    pgtype.Int4
	QuotaResetAt pgtype.Timestamp
	IsActive     pgtype.Bool
}

func (q *Queries) CreateApisKey(ctx context.Context, arg CreateApisKeyParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, createApisKey,
		arg.UserID,
		arg.ApiID,
		arg.PlanID,
		arg.ApiKey,
		arg.QuotaUsed,
		arg.QuotaResetAt,
		arg.IsActive,
	)
}

const getApisKeyById = `-- name: GetApisKeyById :one
SELECT id, user_id, api_id, plan_id, api_key, quota_used, quota_reset_at, is_active, created_at
FROM tbl_apis_key
WHERE id = $1
`

func (q *Queries) GetApisKeyById(ctx context.Context, id pgtype.UUID) (TblApisKey, error) {
	row := q.db.QueryRow(ctx, getApisKeyById, id)
	var i TblApisKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ApiID,
		&i.PlanID,
		&i.ApiKey,
		&i.QuotaUsed,
		&i.QuotaResetAt,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const getApisKeyByKey = `-- name: GetApisKeyByKey :one
SELECT id, user_id, api_id, plan_id, api_key, quota_used, quota_reset_at, is_active, created_at
FROM tbl_apis_key
WHERE api_key = $1
`

func (q *Queries) GetApisKeyByKey(ctx context.Context, apiKey pgtype.Text) (TblApisKey, error) {
	row := q.db.QueryRow(ctx, getApisKeyByKey, apiKey)
	var i TblApisKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ApiID,
		&i.PlanID,
		&i.ApiKey,
		&i.QuotaUsed,
		&i.QuotaResetAt,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}
