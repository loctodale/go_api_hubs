// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: 00001_tbl_apis.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createApis = `-- name: CreateApis :execresult
INSERT INTO tbl_apis
(provider_id, name, slug, description, category, base_url, doc_url, status, created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW())
`

type CreateApisParams struct {
	ProviderID  pgtype.UUID
	Name        string
	Slug        string
	Description pgtype.Text
	Category    pgtype.Text
	BaseUrl     pgtype.Text
	DocUrl      pgtype.Text
	Status      NullApiStatus
}

func (q *Queries) CreateApis(ctx context.Context, arg CreateApisParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, createApis,
		arg.ProviderID,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.Category,
		arg.BaseUrl,
		arg.DocUrl,
		arg.Status,
	)
}

const getApiById = `-- name: GetApiById :one
SELECT id, provider_id, name, slug, description, category, base_url, doc_url, status, created_at
FROM tbl_apis
WHERE id = $1
`

func (q *Queries) GetApiById(ctx context.Context, id pgtype.UUID) (TblApi, error) {
	row := q.db.QueryRow(ctx, getApiById, id)
	var i TblApi
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.Category,
		&i.BaseUrl,
		&i.DocUrl,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getApis = `-- name: GetApis :many
SELECT id, provider_id, name, slug, description, category, base_url, doc_url, status, created_at
FROM tbl_apis
`

func (q *Queries) GetApis(ctx context.Context) ([]TblApi, error) {
	rows, err := q.db.Query(ctx, getApis)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TblApi
	for rows.Next() {
		var i TblApi
		if err := rows.Scan(
			&i.ID,
			&i.ProviderID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.Category,
			&i.BaseUrl,
			&i.DocUrl,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
