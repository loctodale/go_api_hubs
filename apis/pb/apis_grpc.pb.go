// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: proto/apis.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApisService_AddOneApi_FullMethodName  = "/pb.apisService/AddOneApi"
	ApisService_GetApiById_FullMethodName = "/pb.apisService/GetApiById"
)

// ApisServiceClient is the client API for ApisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApisServiceClient interface {
	AddOneApi(ctx context.Context, in *CreateApiRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	GetApiById(ctx context.Context, in *GetOneApiRequest, opts ...grpc.CallOption) (*GetOneApiResponse, error)
}

type apisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApisServiceClient(cc grpc.ClientConnInterface) ApisServiceClient {
	return &apisServiceClient{cc}
}

func (c *apisServiceClient) AddOneApi(ctx context.Context, in *CreateApiRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, ApisService_AddOneApi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisServiceClient) GetApiById(ctx context.Context, in *GetOneApiRequest, opts ...grpc.CallOption) (*GetOneApiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOneApiResponse)
	err := c.cc.Invoke(ctx, ApisService_GetApiById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApisServiceServer is the server API for ApisService service.
// All implementations must embed UnimplementedApisServiceServer
// for forward compatibility.
type ApisServiceServer interface {
	AddOneApi(context.Context, *CreateApiRequest) (*BaseResponse, error)
	GetApiById(context.Context, *GetOneApiRequest) (*GetOneApiResponse, error)
	mustEmbedUnimplementedApisServiceServer()
}

// UnimplementedApisServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApisServiceServer struct{}

func (UnimplementedApisServiceServer) AddOneApi(context.Context, *CreateApiRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOneApi not implemented")
}
func (UnimplementedApisServiceServer) GetApiById(context.Context, *GetOneApiRequest) (*GetOneApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiById not implemented")
}
func (UnimplementedApisServiceServer) mustEmbedUnimplementedApisServiceServer() {}
func (UnimplementedApisServiceServer) testEmbeddedByValue()                     {}

// UnsafeApisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApisServiceServer will
// result in compilation errors.
type UnsafeApisServiceServer interface {
	mustEmbedUnimplementedApisServiceServer()
}

func RegisterApisServiceServer(s grpc.ServiceRegistrar, srv ApisServiceServer) {
	// If the following call pancis, it indicates UnimplementedApisServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApisService_ServiceDesc, srv)
}

func _ApisService_AddOneApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServiceServer).AddOneApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApisService_AddOneApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServiceServer).AddOneApi(ctx, req.(*CreateApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApisService_GetApiById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServiceServer).GetApiById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApisService_GetApiById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServiceServer).GetApiById(ctx, req.(*GetOneApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApisService_ServiceDesc is the grpc.ServiceDesc for ApisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.apisService",
	HandlerType: (*ApisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOneApi",
			Handler:    _ApisService_AddOneApi_Handler,
		},
		{
			MethodName: "GetApiById",
			Handler:    _ApisService_GetApiById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/apis.proto",
}
