// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: proto/apis.proto

package apis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApiService_AddOneApi_FullMethodName  = "/pb.ApiService/AddOneApi"
	ApiService_GetApiById_FullMethodName = "/pb.ApiService/GetApiById"
)

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	AddOneApi(ctx context.Context, in *CreateApiRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	GetApiById(ctx context.Context, in *GetOneApiRequest, opts ...grpc.CallOption) (*GetOneApiResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) AddOneApi(ctx context.Context, in *CreateApiRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, ApiService_AddOneApi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetApiById(ctx context.Context, in *GetOneApiRequest, opts ...grpc.CallOption) (*GetOneApiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOneApiResponse)
	err := c.cc.Invoke(ctx, ApiService_GetApiById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility.
type ApiServiceServer interface {
	AddOneApi(context.Context, *CreateApiRequest) (*BaseResponse, error)
	GetApiById(context.Context, *GetOneApiRequest) (*GetOneApiResponse, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApiServiceServer struct{}

func (UnimplementedApiServiceServer) AddOneApi(context.Context, *CreateApiRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOneApi not implemented")
}
func (UnimplementedApiServiceServer) GetApiById(context.Context, *GetOneApiRequest) (*GetOneApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiById not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}
func (UnimplementedApiServiceServer) testEmbeddedByValue()                    {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	// If the following call pancis, it indicates UnimplementedApiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_AddOneApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AddOneApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_AddOneApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AddOneApi(ctx, req.(*CreateApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetApiById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetApiById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetApiById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetApiById(ctx, req.(*GetOneApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOneApi",
			Handler:    _ApiService_AddOneApi_Handler,
		},
		{
			MethodName: "GetApiById",
			Handler:    _ApiService_GetApiById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/apis.proto",
}

const (
	ApisPlanService_AddOneApiPlan_FullMethodName = "/pb.ApisPlanService/AddOneApiPlan"
)

// ApisPlanServiceClient is the client API for ApisPlanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApisPlanServiceClient interface {
	AddOneApiPlan(ctx context.Context, in *CreateApiPlanRequest, opts ...grpc.CallOption) (*BaseResponse, error)
}

type apisPlanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApisPlanServiceClient(cc grpc.ClientConnInterface) ApisPlanServiceClient {
	return &apisPlanServiceClient{cc}
}

func (c *apisPlanServiceClient) AddOneApiPlan(ctx context.Context, in *CreateApiPlanRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, ApisPlanService_AddOneApiPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApisPlanServiceServer is the server API for ApisPlanService service.
// All implementations must embed UnimplementedApisPlanServiceServer
// for forward compatibility.
type ApisPlanServiceServer interface {
	AddOneApiPlan(context.Context, *CreateApiPlanRequest) (*BaseResponse, error)
	mustEmbedUnimplementedApisPlanServiceServer()
}

// UnimplementedApisPlanServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApisPlanServiceServer struct{}

func (UnimplementedApisPlanServiceServer) AddOneApiPlan(context.Context, *CreateApiPlanRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOneApiPlan not implemented")
}
func (UnimplementedApisPlanServiceServer) mustEmbedUnimplementedApisPlanServiceServer() {}
func (UnimplementedApisPlanServiceServer) testEmbeddedByValue()                         {}

// UnsafeApisPlanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApisPlanServiceServer will
// result in compilation errors.
type UnsafeApisPlanServiceServer interface {
	mustEmbedUnimplementedApisPlanServiceServer()
}

func RegisterApisPlanServiceServer(s grpc.ServiceRegistrar, srv ApisPlanServiceServer) {
	// If the following call pancis, it indicates UnimplementedApisPlanServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApisPlanService_ServiceDesc, srv)
}

func _ApisPlanService_AddOneApiPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApiPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisPlanServiceServer).AddOneApiPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApisPlanService_AddOneApiPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisPlanServiceServer).AddOneApiPlan(ctx, req.(*CreateApiPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApisPlanService_ServiceDesc is the grpc.ServiceDesc for ApisPlanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApisPlanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ApisPlanService",
	HandlerType: (*ApisPlanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOneApiPlan",
			Handler:    _ApisPlanService_AddOneApiPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/apis.proto",
}

const (
	ApisKeyService_AddOneApisKey_FullMethodName = "/pb.ApisKeyService/AddOneApisKey"
	ApisKeyService_CallApiByKey_FullMethodName  = "/pb.ApisKeyService/CallApiByKey"
)

// ApisKeyServiceClient is the client API for ApisKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApisKeyServiceClient interface {
	AddOneApisKey(ctx context.Context, in *CreateApisKeyRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	CallApiByKey(ctx context.Context, in *CallApiRequest, opts ...grpc.CallOption) (*CallApiResponse, error)
}

type apisKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApisKeyServiceClient(cc grpc.ClientConnInterface) ApisKeyServiceClient {
	return &apisKeyServiceClient{cc}
}

func (c *apisKeyServiceClient) AddOneApisKey(ctx context.Context, in *CreateApisKeyRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, ApisKeyService_AddOneApisKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisKeyServiceClient) CallApiByKey(ctx context.Context, in *CallApiRequest, opts ...grpc.CallOption) (*CallApiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallApiResponse)
	err := c.cc.Invoke(ctx, ApisKeyService_CallApiByKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApisKeyServiceServer is the server API for ApisKeyService service.
// All implementations must embed UnimplementedApisKeyServiceServer
// for forward compatibility.
type ApisKeyServiceServer interface {
	AddOneApisKey(context.Context, *CreateApisKeyRequest) (*BaseResponse, error)
	CallApiByKey(context.Context, *CallApiRequest) (*CallApiResponse, error)
	mustEmbedUnimplementedApisKeyServiceServer()
}

// UnimplementedApisKeyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApisKeyServiceServer struct{}

func (UnimplementedApisKeyServiceServer) AddOneApisKey(context.Context, *CreateApisKeyRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOneApisKey not implemented")
}
func (UnimplementedApisKeyServiceServer) CallApiByKey(context.Context, *CallApiRequest) (*CallApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallApiByKey not implemented")
}
func (UnimplementedApisKeyServiceServer) mustEmbedUnimplementedApisKeyServiceServer() {}
func (UnimplementedApisKeyServiceServer) testEmbeddedByValue()                        {}

// UnsafeApisKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApisKeyServiceServer will
// result in compilation errors.
type UnsafeApisKeyServiceServer interface {
	mustEmbedUnimplementedApisKeyServiceServer()
}

func RegisterApisKeyServiceServer(s grpc.ServiceRegistrar, srv ApisKeyServiceServer) {
	// If the following call pancis, it indicates UnimplementedApisKeyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApisKeyService_ServiceDesc, srv)
}

func _ApisKeyService_AddOneApisKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApisKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisKeyServiceServer).AddOneApisKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApisKeyService_AddOneApisKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisKeyServiceServer).AddOneApisKey(ctx, req.(*CreateApisKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApisKeyService_CallApiByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisKeyServiceServer).CallApiByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApisKeyService_CallApiByKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisKeyServiceServer).CallApiByKey(ctx, req.(*CallApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApisKeyService_ServiceDesc is the grpc.ServiceDesc for ApisKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApisKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ApisKeyService",
	HandlerType: (*ApisKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOneApisKey",
			Handler:    _ApisKeyService_AddOneApisKey_Handler,
		},
		{
			MethodName: "CallApiByKey",
			Handler:    _ApisKeyService_CallApiByKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/apis.proto",
}
