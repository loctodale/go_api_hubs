scalar Time

type SampleResponse {
    code: Int!,
    Message: String!
}
type Account {
    id: String!
    name: String!
    orders: [Order!]!
}

type Product {
    id: String!
    name: String!,
    description: String!,
    price: Float!
}

type Order {
    id: String!,
    createdAt: Time!,
    totalPrice: Float!,
    products: [OrderedProduct!]!
}

type OrderedProduct {
    id: String!,
    name: String!,
    description: String!,
    price: Float!,
    quantity: Int!
}

input PaginationInput {
    skip: Int,
    take: Int
}

input AccountInput {
    userAccount: String!
    userPassword: String!
}

#Register account
input RegisterAccount {
    userAccount: String!
}

input ProductInput {
    name: String!,
    description: String!
    price: Float!
}

input OrderProductInput {
    name: String!,
    quantity: Int!
}

input OrderInput {
    accountId: String!,
    products: [OrderProductInput!]!
}

type Mutation {
    registerAccount(account: RegisterAccount): SampleResponse
    createAccount(account: AccountInput): Account
    createProduct(product: ProductInput): Product
    createOrder(order: OrderInput): Order
}

type Query {
    accounts(paginations: PaginationInput): [Account!]!
    products(paginations: PaginationInput): [Product!]!
}