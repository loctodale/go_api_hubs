// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: proto/tenant.proto

package tenant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TenantServiceGrpc_CreateNewTenantId_FullMethodName = "/tenant.TenantServiceGrpc/CreateNewTenantId"
)

// TenantServiceGrpcClient is the client API for TenantServiceGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantServiceGrpcClient interface {
	CreateNewTenantId(ctx context.Context, in *RequestCreateTenant, opts ...grpc.CallOption) (*ResponseCreateTenant, error)
}

type tenantServiceGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantServiceGrpcClient(cc grpc.ClientConnInterface) TenantServiceGrpcClient {
	return &tenantServiceGrpcClient{cc}
}

func (c *tenantServiceGrpcClient) CreateNewTenantId(ctx context.Context, in *RequestCreateTenant, opts ...grpc.CallOption) (*ResponseCreateTenant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseCreateTenant)
	err := c.cc.Invoke(ctx, TenantServiceGrpc_CreateNewTenantId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantServiceGrpcServer is the server API for TenantServiceGrpc service.
// All implementations must embed UnimplementedTenantServiceGrpcServer
// for forward compatibility.
type TenantServiceGrpcServer interface {
	CreateNewTenantId(context.Context, *RequestCreateTenant) (*ResponseCreateTenant, error)
	mustEmbedUnimplementedTenantServiceGrpcServer()
}

// UnimplementedTenantServiceGrpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTenantServiceGrpcServer struct{}

func (UnimplementedTenantServiceGrpcServer) CreateNewTenantId(context.Context, *RequestCreateTenant) (*ResponseCreateTenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewTenantId not implemented")
}
func (UnimplementedTenantServiceGrpcServer) mustEmbedUnimplementedTenantServiceGrpcServer() {}
func (UnimplementedTenantServiceGrpcServer) testEmbeddedByValue()                           {}

// UnsafeTenantServiceGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantServiceGrpcServer will
// result in compilation errors.
type UnsafeTenantServiceGrpcServer interface {
	mustEmbedUnimplementedTenantServiceGrpcServer()
}

func RegisterTenantServiceGrpcServer(s grpc.ServiceRegistrar, srv TenantServiceGrpcServer) {
	// If the following call pancis, it indicates UnimplementedTenantServiceGrpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TenantServiceGrpc_ServiceDesc, srv)
}

func _TenantServiceGrpc_CreateNewTenantId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreateTenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceGrpcServer).CreateNewTenantId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantServiceGrpc_CreateNewTenantId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceGrpcServer).CreateNewTenantId(ctx, req.(*RequestCreateTenant))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantServiceGrpc_ServiceDesc is the grpc.ServiceDesc for TenantServiceGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantServiceGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tenant.TenantServiceGrpc",
	HandlerType: (*TenantServiceGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewTenantId",
			Handler:    _TenantServiceGrpc_CreateNewTenantId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tenant.proto",
}
