// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: 00002_tbl_token_query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNewToken = `-- name: CreateNewToken :exec
INSERT INTO tbl_token (user_id, public_key, refresh_token)
VALUES ($1, $2, $3)
    ON CONFLICT (user_id)
DO UPDATE SET
    public_key = EXCLUDED.public_key,
           refresh_token = EXCLUDED.refresh_token
`

type CreateNewTokenParams struct {
	UserID       pgtype.UUID
	PublicKey    string
	RefreshToken string
}

func (q *Queries) CreateNewToken(ctx context.Context, arg CreateNewTokenParams) error {
	_, err := q.db.Exec(ctx, createNewToken, arg.UserID, arg.PublicKey, arg.RefreshToken)
	return err
}

const getTokenByUser = `-- name: GetTokenByUser :one
SELECT user_id, public_key, refresh_token
FROM tbl_token
WHERE user_id = $1
`

type GetTokenByUserRow struct {
	UserID       pgtype.UUID
	PublicKey    string
	RefreshToken string
}

func (q *Queries) GetTokenByUser(ctx context.Context, userID pgtype.UUID) (GetTokenByUserRow, error) {
	row := q.db.QueryRow(ctx, getTokenByUser, userID)
	var i GetTokenByUserRow
	err := row.Scan(&i.UserID, &i.PublicKey, &i.RefreshToken)
	return i, err
}
